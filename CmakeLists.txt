cmake_minimum_required(VERSION 3.0...3.25)
project(
    LearnWebGPU # name of the project, which will also be the name of the visual studio solution if you use it
    VERSION 0.1.0 # any version number
    LANGUAGES CXX C # programming languages used by the project
)

# options


# variables
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)  # clangd

# dependencies
add_subdirectory(deps/glfw)
add_subdirectory(deps/webgpu)
add_subdirectory(deps/glm)
add_subdirectory(deps/tinyobjloader)
add_subdirectory(deps/stb)
# imgui
set(IMGUI_DIR ${PROJECT_SOURCE_DIR}/deps/imgui)
file(GLOB IMGUI_SRC ${IMGUI_DIR}/*.cpp)
set(IMGUI_SRC ${IMGUI_SRC}
  ${IMGUI_DIR}/backends/imgui_impl_glfw.cpp
  ${IMGUI_DIR}/backends/imgui_impl_wgpu.cpp
)
set(IMGUI_INCLUDE_DIRS ${IMGUI_DIR} ${IMGUI_DIR}/backends)


# app
set(APP_SRC
	src/main.cpp
	src/game.cpp

  src/util/camera.cpp
  src/util/context.cpp
  src/util/load.cpp
  src/util/webgpu-util.cpp
  src/util/pipeline.cpp
  src/util/texture.cpp
  src/util/renderer.cpp
  src/util/timer.cpp

  src/game/chunk.cpp
  src/game/chunk_manager.cpp
  src/game/block.cpp
  src/game/mesh.cpp
  src/game/player.cpp
  src/game/direction.cpp
  src/game/ray.cpp
)

add_executable(App
  ${APP_SRC}
  ${IMGUI_SRC}
)
target_include_directories(App PRIVATE ${PROJECT_SOURCE_DIR}/src ${IMGUI_INCLUDE_DIRS})

target_compile_definitions(App PRIVATE
  ROOT_DIR="${CMAKE_CURRENT_SOURCE_DIR}"
  GLM_FORCE_DEPTH_ZERO_TO_ONE
  GLM_FORCE_XYZW_ONLY
)

target_link_libraries(App PRIVATE glfw webgpu dawn_glfw dawncpp glm tinyobjloader stb)

set_target_properties(App PROPERTIES
  CXX_STANDARD 20
  # COMPILE_WARNING_AS_ERROR ON
)
# set_target_properties(App PROPERTIES VS_DEBUGGER_ENVIRONMENT "DAWN_DEBUG_BREAK_ON_ERROR=1")

if (MSVC)
    target_compile_options(App PRIVATE /W4)
else()
    target_compile_options(App PRIVATE -Wall -Wextra -pedantic)
endif()

if(XCODE)
    set_target_properties(App PROPERTIES
        XCODE_GENERATE_SCHEME ON
        XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE "Metal"
    )
    set(CMAKE_XCODE_ATTRIBUTE_OTHER_CODE_SIGN_FLAGS "-o linker-signed")
endif()
