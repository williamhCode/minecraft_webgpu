cmake_minimum_required(VERSION 3.0...3.25)
project(
    LearnWebGPU # name of the project, which will also be the name of the visual studio solution if you use it
    VERSION 0.1.0 # any version number
    LANGUAGES CXX C # programming languages used by the project
)

# variables
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)  # clangd

add_subdirectory(deps/glfw)
add_subdirectory(deps/webgpu)
add_subdirectory(deps/glm)

# sources
add_executable(App
	src/main.cpp
	src/game.cpp
  src/util/camera.cpp
  src/util/handle.cpp
  src/util/util.cpp
  src/util/webgpu-util.cpp
)
target_include_directories(App PRIVATE ${PROJECT_SOURCE_DIR}/src)

target_compile_definitions(App PRIVATE
    RESOURCE_DIR="${CMAKE_CURRENT_SOURCE_DIR}/src/resources"
    GLM_FORCE_DEPTH_ZERO_TO_ONE
    GLM_FORCE_LEFT_HANDED
)

target_link_libraries(App PRIVATE glfw webgpu dawn_glfw dawncpp glm)

# options
set_target_properties(App PROPERTIES
    CXX_STANDARD 20
    # COMPILE_WARNING_AS_ERROR ON
)
set_target_properties(App PROPERTIES VS_DEBUGGER_ENVIRONMENT "DAWN_DEBUG_BREAK_ON_ERROR=1")

if (MSVC)
    target_compile_options(App PRIVATE /W4)
else()
    target_compile_options(App PRIVATE -Wall -Wextra -pedantic)
endif()

if(XCODE)
    set_target_properties(App PROPERTIES
        XCODE_GENERATE_SCHEME ON
        XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE "Metal"
    )
    set(CMAKE_XCODE_ATTRIBUTE_OTHER_CODE_SIGN_FLAGS "-o linker-signed")
endif()
